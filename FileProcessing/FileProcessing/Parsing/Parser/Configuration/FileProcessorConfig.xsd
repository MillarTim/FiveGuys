<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2005 rel. 3 U (http://www.altova.com) by Tim Millar (CSS, Inc.) -->
<xs:schema xmlns="http://schemas.csssoftware.com/operations/2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:codeNamespace="CSS.Connector.FileProcessing.Parsing.Parser" targetNamespace="http://schemas.csssoftware.com/operations/2.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:complexType name="FileProcessorConfig">
		<xs:annotation>
			<xs:documentation>File Processor Configuration Information for inbound files.  Keyed by the file type, which is the name the file is known by, the config information will contain details that control how the file is processed.</xs:documentation>
			<xs:appinfo source="cfg_sys"/>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="fileType" type="xs:string">
				<xs:annotation>
					<xs:documentation>The name of the type of file that is being processed.  For example, MutualFundNetworkingFile, is the 'fileType' for the SIAC 084 file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="fileProcessorTypeName" type="xs:string">
				<xs:annotation>
					<xs:documentation>The type or base class of the File Processor used to process this file type.  For example, the RecordBlockingFileProcessor, will process a file and send chunks of record data to a processing program one block at a time.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="canBeReprocessed" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>True if the file is allowed to be reprocessed without manual intervention.  If this is false, an error will be received if the file has been processed previously based on an entry in the inbound trade received table (trd_rec).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ignoreUndefinedRecordTypes" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>This will control whether or not an error is thrown if a record type is found while processing a file that is not defined in one of the Record Processor Configuration entries.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="resourcesAssembly" type="xs:string">
				<xs:annotation>
					<xs:documentation>The name of the assembly with the resources used to parse the file.  This will generally be the assembly with the record processors that will be used to process this file.  The resources can be generated by the internal CSS tool, the File Schema Editor.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="resourcesNamespace" type="xs:string">
				<xs:annotation>
					<xs:documentation>The namespace (in the Resource Assembly described above) that can be used to locate the resources used for parsing the file.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="xmlNameSpace" type="xs:string">
				<xs:annotation>
					<xs:documentation>XML Namespace used in the block of XML sent to the Record Processors.  This is defined in the configuration so that if the Record Processors for a File and the Operations code are at different versions and use different namespaces, that the code will still be compatible.  The Operations code and Record Processors can be upgraded independently.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="beginningOfFileProcessorTypeName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Type containing method that can be called when processing of file starts.  The name of the method called will be BeginningOfFileProcessor and it must have one parameter which will be for the file path and name.  If this entry is not filled in, no call will be made.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="recordProcessorConfigs">
				<xs:annotation>
					<xs:documentation>A file will contain one or more record types.  Each Record Processor Configuration will describe the details that define the processing for one record type.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="recordProcessorConfig" type="RecordProcessorConfig" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="endOfFileProcessorTypeName" type="xs:string" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Type containing method that can be called when processing of file is complete.  The method called will be EndOfFileProcessing and it must have one parameter which will be for the completion information.  If this entry is not filled in, no call will be made.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="fileProcessorConfig" type="FileProcessorConfig"/>
	<xs:complexType name="RecordProcessorConfig">
		<xs:annotation>
			<xs:documentation>Within a File Processor Configuration there will be one or more record processors.  Each one will contain configuration information on how a specific record type will be processed.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="recordType" type="xs:string">
				<xs:annotation>
					<xs:documentation>The record type name, such as FundAccountUpdate</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="recordProcessorTypeName" type="xs:string">
				<xs:annotation>
					<xs:documentation>The assembly and class that contains the ProcessRecord method to process this particular record type.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="canBeReprocessed" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>True if there is no harm in reprocessing this record type.  No errors will be thrown if this is true.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="ignoreRecordType" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>True if this record type is to be ignored.  No code will be called to process the record.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="recordProcessorConfig" type="RecordProcessorConfig"/>
</xs:schema>
