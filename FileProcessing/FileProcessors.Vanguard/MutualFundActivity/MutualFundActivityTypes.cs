/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.MutualFundActivity

{

public class MutualFundActivity : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public Activity Activity { get; set; }
}


public class Activity : PhysicalRecord
{
public string SequenceNumber { get; set; } // max length 1; required False
public string TransmissionDate { get; set; } // max length 8; required False
public string AutorouteFileId { get; set; } // max length 8; required False
public BlockingRecord BlockingRecord { get; set; }
}


public class Detail : BlockingRecord
{
public string SystemCode { get; set; } // max length 1; required False
public string RecordType { get; set; } // max length 2; required False
public string SequenceNumber { get; set; } // max length 2; required False
public string ClearingSettlingFirmNumber { get; set; } // max length 4; required False
public string ClearingSettlingFundNumber { get; set; } // max length 4; required False
public string SecurityIssueIdNumber { get; set; } // max length 9; required False
public string TransactionType { get; set; } // max length 2; required False
public string FirmFundidentificationNumber { get; set; } // max length 20; required False
public string EffectiveDate { get; set; } // max length 8; required False
private DateTime? _effectiveDateFormatted;
public DateTime EffectiveDateFormatted
{
	get
	{
		if (_effectiveDateFormatted == null)
		{
			_effectiveDateFormatted = DateTime.Parse(Formatter.Format(EffectiveDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_effectiveDateFormatted;
	}
}

public string ShareBalanceAmount { get; set; } // max length 13; required True
private Decimal? _shareBalanceAmountFormatted;
public Decimal ShareBalanceAmountFormatted
{
	get
	{
		if (_shareBalanceAmountFormatted == null)
		{
			_shareBalanceAmountFormatted = Decimal.Parse(Formatter.Format(ShareBalanceAmount, @"(\d{9})(\d{4})~$1.$2~Decimal"));
		}
		return (Decimal)_shareBalanceAmountFormatted;
	}
}

public string ShareBalanceIndicator { get; set; } // max length 1; required False
public string DebitCreditIndicator { get; set; } // max length 1; required False
public string DollarAmount { get; set; } // max length 16; required True
private Decimal? _dollarAmountFormatted;
public Decimal DollarAmountFormatted
{
	get
	{
		if (_dollarAmountFormatted == null)
		{
			_dollarAmountFormatted = Decimal.Parse(Formatter.Format(DollarAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_dollarAmountFormatted;
	}
}

public string NetworkControlIndicator { get; set; } // max length 1; required False
public string DividendCode { get; set; } // max length 1; required False
public string MarginAccountIndicator { get; set; } // max length 1; required False
public string CombinedTefraNraIndicator { get; set; } // max length 1; required False
public string LoadTypeIndicator { get; set; } // max length 1; required True
public string FirmFundIdentificationIndicator { get; set; } // max length 1; required False
public string SocialCode { get; set; } // max length 2; required False
public string MembershipIdentifier { get; set; } // max length 2; required True
public string OpposingMembershipIdentifier { get; set; } // max length 2; required True
public string OriginalTradeDatePayableDateForDividendAdj { get; set; } // max length 8; required False
private DateTime? _originalTradeDatePayableDateForDividendAdjFormatted;
public DateTime OriginalTradeDatePayableDateForDividendAdjFormatted
{
	get
	{
		if (_originalTradeDatePayableDateForDividendAdjFormatted == null)
		{
			_originalTradeDatePayableDateForDividendAdjFormatted = DateTime.Parse(Formatter.Format(OriginalTradeDatePayableDateForDividendAdj, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_originalTradeDatePayableDateForDividendAdjFormatted;
	}
}

public string Price { get; set; } // max length 12; required False
private Decimal? _priceFormatted;
public Decimal PriceFormatted
{
	get
	{
		if (_priceFormatted == null)
		{
			_priceFormatted = Decimal.Parse(Formatter.Format(Price, @"(\d{6})(\d{6})~$1.$2~Decimal"));
		}
		return (Decimal)_priceFormatted;
	}
}

public string CurrencyIndicator { get; set; } // max length 3; required False
public string IraYearOfContributionCode { get; set; } // max length 1; required False
public string CrossSecurityIssueNumber { get; set; } // max length 9; required True
public string Description { get; set; } // max length 29; required True
public string DividendRate { get; set; } // max length 5; required True
private Decimal? _dividendRateFormatted;
public Decimal DividendRateFormatted
{
	get
	{
		if (_dividendRateFormatted == null)
		{
			_dividendRateFormatted = Decimal.Parse(Formatter.Format(DividendRate, @"(\d{2})(\d{3})~$1.$2~Decimal"));
		}
		return (Decimal)_dividendRateFormatted;
	}
}

public string AgentForFirmNumber { get; set; } // max length 4; required True
public string _529TransferReasonCode { get; set; } // max length 1; required True
public string Irs529AnnualStrategyChangeCounter { get; set; } // max length 1; required True
public string WithholdingIndicator { get; set; } // max length 1; required True
public string WithholdingAmount { get; set; } // max length 16; required True
private Decimal? _withholdingAmountFormatted;
public Decimal WithholdingAmountFormatted
{
	get
	{
		if (_withholdingAmountFormatted == null)
		{
			_withholdingAmountFormatted = Decimal.Parse(Formatter.Format(WithholdingAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_withholdingAmountFormatted;
	}
}

public string ExchangeFee { get; set; } // max length 4; required True
private Decimal? _exchangeFeeFormatted;
public Decimal ExchangeFeeFormatted
{
	get
	{
		if (_exchangeFeeFormatted == null)
		{
			_exchangeFeeFormatted = Decimal.Parse(Formatter.Format(ExchangeFee, @"(\d{2})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_exchangeFeeFormatted;
	}
}

public string SalesChargeRate { get; set; } // max length 4; required True
private Decimal? _salesChargeRateFormatted;
public Decimal SalesChargeRateFormatted
{
	get
	{
		if (_salesChargeRateFormatted == null)
		{
			_salesChargeRateFormatted = Decimal.Parse(Formatter.Format(SalesChargeRate, @"(\d{1})(\d{3})~$1.$2~Decimal"));
		}
		return (Decimal)_salesChargeRateFormatted;
	}
}

public string CommissionCdscAmount { get; set; } // max length 16; required True
private Decimal? _commissionCdscAmountFormatted;
public Decimal CommissionCdscAmountFormatted
{
	get
	{
		if (_commissionCdscAmountFormatted == null)
		{
			_commissionCdscAmountFormatted = Decimal.Parse(Formatter.Format(CommissionCdscAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_commissionCdscAmountFormatted;
	}
}

public string CashDisbursementIndicator { get; set; } // max length 1; required True
public string BuySellIndicator { get; set; } // max length 1; required True
public string TpaInvestmentAgentNumber { get; set; } // max length 4; required True
public string AccrualIndicator { get; set; } // max length 1; required True
public string TransferDisbursementOptionAccruals { get; set; } // max length 1; required True
public string AccrualMoneyAmountAccrualMoneyAccountBalance { get; set; } // max length 16; required True
private Decimal? _accrualMoneyAmountAccrualMoneyAccountBalanceFormatted;
public Decimal AccrualMoneyAmountAccrualMoneyAccountBalanceFormatted
{
	get
	{
		if (_accrualMoneyAmountAccrualMoneyAccountBalanceFormatted == null)
		{
			_accrualMoneyAmountAccrualMoneyAccountBalanceFormatted = Decimal.Parse(Formatter.Format(AccrualMoneyAmountAccrualMoneyAccountBalance, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_accrualMoneyAmountAccrualMoneyAccountBalanceFormatted;
	}
}

public string OriginalControlNumber { get; set; } // max length 15; required True
public string ControlNumberCorrectionIndicator { get; set; } // max length 1; required True
public string OpposingFundAccountNumber { get; set; } // max length 20; required True
public string ShareBalanceAmountExtended { get; set; } // max length 16; required True
private Decimal? _shareBalanceAmountExtendedFormatted;
public Decimal ShareBalanceAmountExtendedFormatted
{
	get
	{
		if (_shareBalanceAmountExtendedFormatted == null)
		{
			_shareBalanceAmountExtendedFormatted = Decimal.Parse(Formatter.Format(ShareBalanceAmountExtended, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_shareBalanceAmountExtendedFormatted;
	}
}

public string OriginalControlNumberIndicator { get; set; } // max length 1; required True
public string UnderlyingCustomerAccountNumber { get; set; } // max length 20; required True
public string OpposingClearingSettlingFirmNumber { get; set; } // max length 4; required True
public string OpposingNetworkControlIndicator { get; set; } // max length 1; required True
public string OpposingUnderlyingCustomerAccountNumber { get; set; } // max length 20; required True
public string OmnibusAccountIndicator { get; set; } // max length 1; required True
public string CostBasisMoneyAmount { get; set; } // max length 16; required True
private Decimal? _costBasisMoneyAmountFormatted;
public Decimal CostBasisMoneyAmountFormatted
{
	get
	{
		if (_costBasisMoneyAmountFormatted == null)
		{
			_costBasisMoneyAmountFormatted = Decimal.Parse(Formatter.Format(CostBasisMoneyAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_costBasisMoneyAmountFormatted;
	}
}

public string EarningsToDateMoneyAmount { get; set; } // max length 16; required True
private Decimal? _earningsToDateMoneyAmountFormatted;
public Decimal EarningsToDateMoneyAmountFormatted
{
	get
	{
		if (_earningsToDateMoneyAmountFormatted == null)
		{
			_earningsToDateMoneyAmountFormatted = Decimal.Parse(Formatter.Format(EarningsToDateMoneyAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_earningsToDateMoneyAmountFormatted;
	}
}

public string NegativeEarningsToDateIndicator { get; set; } // max length 1; required True
public string OpposingOriginatingUnderlyingFirmNumber { get; set; } // max length 4; required True
public string OriginatingUnderlyingFirmNumber { get; set; } // max length 4; required True
public string FatcaWithholdingIndicator { get; set; } // max length 1; required True
public string FatcaWithholdingRate { get; set; } // max length 2; required True
private Decimal? _fatcaWithholdingRateFormatted;
public Decimal FatcaWithholdingRateFormatted
{
	get
	{
		if (_fatcaWithholdingRateFormatted == null)
		{
			_fatcaWithholdingRateFormatted = Decimal.Parse(Formatter.Format(FatcaWithholdingRate, @"(\d{2})~0.$1~Decimal"));
		}
		return (Decimal)_fatcaWithholdingRateFormatted;
	}
}

public string FatcaWithholdingAmount { get; set; } // max length 16; required True
private Decimal? _fatcaWithholdingAmountFormatted;
public Decimal FatcaWithholdingAmountFormatted
{
	get
	{
		if (_fatcaWithholdingAmountFormatted == null)
		{
			_fatcaWithholdingAmountFormatted = Decimal.Parse(Formatter.Format(FatcaWithholdingAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_fatcaWithholdingAmountFormatted;
	}
}

public string RedemptionFeeRate { get; set; } // max length 7; required True
private Decimal? _redemptionFeeRateFormatted;
public Decimal RedemptionFeeRateFormatted
{
	get
	{
		if (_redemptionFeeRateFormatted == null)
		{
			_redemptionFeeRateFormatted = Decimal.Parse(Formatter.Format(RedemptionFeeRate, @"(\d{2})(\d{5})~$1.$2~Decimal"));
		}
		return (Decimal)_redemptionFeeRateFormatted;
	}
}

public string RedemptionFeeMoneyAmount { get; set; } // max length 16; required True
private Decimal? _redemptionFeeMoneyAmountFormatted;
public Decimal RedemptionFeeMoneyAmountFormatted
{
	get
	{
		if (_redemptionFeeMoneyAmountFormatted == null)
		{
			_redemptionFeeMoneyAmountFormatted = Decimal.Parse(Formatter.Format(RedemptionFeeMoneyAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_redemptionFeeMoneyAmountFormatted;
	}
}

public string AccountRepresentativeId { get; set; } // max length 9; required True
public string BranchIdentificationNumber { get; set; } // max length 9; required True
public string AccountOpenDate { get; set; } // max length 8; required True
private DateTime? _accountOpenDateFormatted;
public DateTime AccountOpenDateFormatted
{
	get
	{
		if (_accountOpenDateFormatted == null)
		{
			_accountOpenDateFormatted = DateTime.Parse(Formatter.Format(AccountOpenDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_accountOpenDateFormatted;
	}
}

}


public class Trailer : BlockingRecord
{
public string FullRecordType { get; set; } // max length 5; required True
public string FullRecordType2 { get; set; } // max length 5; required True
}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
[System.Xml.Serialization.XmlInclude(typeof(Trailer))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
			{
				outputString = "-" + outputString + index.ToString();
			}
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
