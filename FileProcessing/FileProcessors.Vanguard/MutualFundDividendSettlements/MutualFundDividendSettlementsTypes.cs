/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.MutualFundDividendSettlements

{

public class MutualFundDividendSettlement : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public DividendSettlement DividendSettlement { get; set; }
}


public class DividendSettlement : PhysicalRecord
{
public string SystemCode { get; set; } // max length 1; required False
public string RecordType { get; set; } // max length 2; required False
public string SequenceNumber { get; set; } // max length 1; required False
public string MroRecipientNumber { get; set; } // max length 4; required False
public string Literal1 { get; set; } // max length 11; required False
public string TransmissionDate { get; set; } // max length 8; required False
private DateTime? _transmissionDateFormatted;
public DateTime TransmissionDateFormatted
{
	get
	{
		if (_transmissionDateFormatted == null)
		{
			_transmissionDateFormatted = DateTime.Parse(Formatter.Format(TransmissionDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_transmissionDateFormatted;
	}
}

public string AutorouteFileId { get; set; } // max length 8; required False
public string Literal2 { get; set; } // max length 17; required False
public BlockingRecord BlockingRecord { get; set; }
}


public class Detail : BlockingRecord
{
public string SystemCode { get; set; } // max length 1; required True
public string RecordType { get; set; } // max length 2; required True
public string SequenceNumber { get; set; } // max length 1; required False
public string MroRecipientNumber { get; set; } // max length 4; required False
public string SecurityIssueNumber { get; set; } // max length 9; required False
public string PayReceiveCode { get; set; } // max length 1; required False
public string ContraClearingMemberNumber { get; set; } // max length 4; required False
public string SettlementDate { get; set; } // max length 8; required False
private DateTime? _settlementDateFormatted;
public DateTime SettlementDateFormatted
{
	get
	{
		if (_settlementDateFormatted == null)
		{
			_settlementDateFormatted = DateTime.Parse(Formatter.Format(SettlementDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_settlementDateFormatted;
	}
}

public string FundSymbol { get; set; } // max length 10; required False
public string SettlementValue { get; set; } // max length 16; required False
private Decimal? _settlementValueFormatted;
public Decimal SettlementValueFormatted
{
	get
	{
		if (_settlementValueFormatted == null)
		{
			_settlementValueFormatted = Decimal.Parse(Formatter.Format(SettlementValue, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_settlementValueFormatted;
	}
}

public string SettlementType { get; set; } // max length 3; required False
public string SettlementIndicator { get; set; } // max length 1; required False
public string RecordDate { get; set; } // max length 8; required False
private DateTime? _recordDateFormatted;
public DateTime RecordDateFormatted
{
	get
	{
		if (_recordDateFormatted == null)
		{
			_recordDateFormatted = DateTime.Parse(Formatter.Format(RecordDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_recordDateFormatted;
	}
}

public string PayableDate { get; set; } // max length 8; required False
private DateTime? _payableDateFormatted;
public DateTime PayableDateFormatted
{
	get
	{
		if (_payableDateFormatted == null)
		{
			_payableDateFormatted = DateTime.Parse(Formatter.Format(PayableDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_payableDateFormatted;
	}
}

public string DividendDistributionIndicator { get; set; } // max length 1; required False
public string DividendSettlementFundsType { get; set; } // max length 1; required False
public string TapInvestmentAgentOrFirmNumber { get; set; } // max length 4; required False
public string CurrencyIndicator { get; set; } // max length 3; required False
public string MroRecipientType { get; set; } // max length 1; required False
}


public class Trailer : BlockingRecord
{
public string SystemCode { get; set; } // max length 1; required False
public string RecordType { get; set; } // max length 2; required False
public string SequenceNumber { get; set; } // max length 1; required False
public string MroRecipientNumber { get; set; } // max length 4; required False
public string Literal { get; set; } // max length 11; required False
public string Literal2 { get; set; } // max length 8; required False
public string SameDaySettlementDate { get; set; } // max length 8; required False
private DateTime? _sameDaySettlementDateFormatted;
public DateTime SameDaySettlementDateFormatted
{
	get
	{
		if (_sameDaySettlementDateFormatted == null)
		{
			_sameDaySettlementDateFormatted = DateTime.Parse(Formatter.Format(SameDaySettlementDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_sameDaySettlementDateFormatted;
	}
}

public string DebitItemsSameDaySettlement { get; set; } // max length 6; required False
private int? _debitItemsSameDaySettlementFormatted;
public int DebitItemsSameDaySettlementFormatted
{
	get
	{
		if (_debitItemsSameDaySettlementFormatted == null)
		{
			_debitItemsSameDaySettlementFormatted = int.Parse(Formatter.Format(DebitItemsSameDaySettlement, @"(\d{6})~$1~int"));
		}
		return (int)_debitItemsSameDaySettlementFormatted;
	}
}

public string DebitAmountSameDaySettlement { get; set; } // max length 16; required False
private Decimal? _debitAmountSameDaySettlementFormatted;
public Decimal DebitAmountSameDaySettlementFormatted
{
	get
	{
		if (_debitAmountSameDaySettlementFormatted == null)
		{
			_debitAmountSameDaySettlementFormatted = Decimal.Parse(Formatter.Format(DebitAmountSameDaySettlement, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_debitAmountSameDaySettlementFormatted;
	}
}

public string CreditItemsSameDaySettlement { get; set; } // max length 6; required False
private int? _creditItemsSameDaySettlementFormatted;
public int CreditItemsSameDaySettlementFormatted
{
	get
	{
		if (_creditItemsSameDaySettlementFormatted == null)
		{
			_creditItemsSameDaySettlementFormatted = int.Parse(Formatter.Format(CreditItemsSameDaySettlement, @"(\d{6})~$1~int"));
		}
		return (int)_creditItemsSameDaySettlementFormatted;
	}
}

public string CreditAmountSameDaySettlement { get; set; } // max length 16; required False
private Decimal? _creditAmountSameDaySettlementFormatted;
public Decimal CreditAmountSameDaySettlementFormatted
{
	get
	{
		if (_creditAmountSameDaySettlementFormatted == null)
		{
			_creditAmountSameDaySettlementFormatted = Decimal.Parse(Formatter.Format(CreditAmountSameDaySettlement, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_creditAmountSameDaySettlementFormatted;
	}
}

public string DebitItemsNextDaySettlement { get; set; } // max length 6; required False
private int? _debitItemsNextDaySettlementFormatted;
public int DebitItemsNextDaySettlementFormatted
{
	get
	{
		if (_debitItemsNextDaySettlementFormatted == null)
		{
			_debitItemsNextDaySettlementFormatted = int.Parse(Formatter.Format(DebitItemsNextDaySettlement, @"(\d{6})~$1~int"));
		}
		return (int)_debitItemsNextDaySettlementFormatted;
	}
}

public string DebitAmountNextDaySettlement { get; set; } // max length 16; required False
private Decimal? _debitAmountNextDaySettlementFormatted;
public Decimal DebitAmountNextDaySettlementFormatted
{
	get
	{
		if (_debitAmountNextDaySettlementFormatted == null)
		{
			_debitAmountNextDaySettlementFormatted = Decimal.Parse(Formatter.Format(DebitAmountNextDaySettlement, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_debitAmountNextDaySettlementFormatted;
	}
}

public string CreditItemsNextDaySettlement { get; set; } // max length 6; required False
private int? _creditItemsNextDaySettlementFormatted;
public int CreditItemsNextDaySettlementFormatted
{
	get
	{
		if (_creditItemsNextDaySettlementFormatted == null)
		{
			_creditItemsNextDaySettlementFormatted = int.Parse(Formatter.Format(CreditItemsNextDaySettlement, @"(\d{6})~$1~int"));
		}
		return (int)_creditItemsNextDaySettlementFormatted;
	}
}

public string CreditAmountNextDaySettlement { get; set; } // max length 16; required False
private Decimal? _creditAmountNextDaySettlementFormatted;
public Decimal CreditAmountNextDaySettlementFormatted
{
	get
	{
		if (_creditAmountNextDaySettlementFormatted == null)
		{
			_creditAmountNextDaySettlementFormatted = Decimal.Parse(Formatter.Format(CreditAmountNextDaySettlement, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_creditAmountNextDaySettlementFormatted;
	}
}

public string NextDaySettlementDate { get; set; } // max length 8; required False
private DateTime? _nextDaySettlementDateFormatted;
public DateTime NextDaySettlementDateFormatted
{
	get
	{
		if (_nextDaySettlementDateFormatted == null)
		{
			_nextDaySettlementDateFormatted = DateTime.Parse(Formatter.Format(NextDaySettlementDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_nextDaySettlementDateFormatted;
	}
}

public string MroRecipientType { get; set; } // max length 1; required False
}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
[System.Xml.Serialization.XmlInclude(typeof(Trailer))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
			{
				outputString = "-" + outputString + index.ToString();
			}
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
