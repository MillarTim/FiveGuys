// <auto-generated />
using System;
using CSS.Connector.FileProcessing.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSS.Connector.FileProcessing.Core.Migrations
{
    [DbContext(typeof(FileContext))]
    [Migration("20190712054707_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direction");

                    b.Property<string>("Name");

                    b.Property<string>("Processor");

                    b.Property<string>("RegexNameExpression");

                    b.Property<bool>("UseFileParsing");

                    b.Property<bool>("UseHashCodeDuplicateDetection");

                    b.HasKey("Id");

                    b.ToTable("FileDefinitions");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileEventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InstanceId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("FileEventLogs");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileInstance", b =>
                {
                    b.Property<string>("InstanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginTime");

                    b.Property<DateTime?>("EndTime");

                    b.Property<DateTime?>("FileDate");

                    b.Property<int?>("FileDefinitionId");

                    b.Property<int>("FileId");

                    b.Property<string>("HashCode");

                    b.Property<string>("Message");

                    b.Property<int?>("SequenceNumber");

                    b.Property<bool>("Successful");

                    b.HasKey("InstanceId");

                    b.HasIndex("FileDefinitionId");

                    b.ToTable("FileInstances");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileProcessorConfig", b =>
                {
                    b.Property<string>("Processor")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Config");

                    b.HasKey("Processor");

                    b.ToTable("FileProcessorConfigs");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.TypeMapping", b =>
                {
                    b.Property<string>("FileId");

                    b.Property<string>("KeyType");

                    b.Property<string>("Value");

                    b.HasKey("FileId", "KeyType");

                    b.ToTable("TypeMappings");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileWatcherFolder", b =>
                {
                    b.Property<string>("WatchingPath")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InProcessPath");

                    b.Property<string>("ProcessedPath");

                    b.HasKey("WatchingPath");

                    b.ToTable("FileWatcherFolders");
                });

            modelBuilder.Entity("CSS.Connector.FileProcessing.Core.Models.FileInstance", b =>
                {
                    b.HasOne("CSS.Connector.FileProcessing.Core.Models.FileDefinition")
                        .WithMany("FileInstances")
                        .HasForeignKey("FileDefinitionId");
                });
#pragma warning restore 612, 618
        }
    }
}
