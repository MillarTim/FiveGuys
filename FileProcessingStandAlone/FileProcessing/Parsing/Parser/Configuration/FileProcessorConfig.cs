namespace CSS.Connector.FileProcessing.Parsing.Parser
{
/// <summary>File Processor Configuration Information for inbound files.  Keyed by the file type, which is the name the file is known by, the config information will contain details that control how the file is processed.</summary>
public partial class FileProcessorConfig : CssObject
{
    /// <summary>Initializes a new instance of FileProcessorConfig.</summary>
    public FileProcessorConfig()
    {
    }
    
    /// <summary>The name of the type of file that is being processed.  For example, MutualFundNetworkingFile, is the 'fileType' for the SIAC 084 file.</summary>
    public string FileType { get; set; }
    
    /// <summary>The type or base class of the File Processor used to process this file type.  For example, the RecordBlockingFileProcessor, will process a file and send chunks of record data to a processing program one block at a time.</summary>
    public string FileProcessorTypeName { get; set; }
    
    /// <summary>True if the file is allowed to be reprocessed without manual intervention.  If this is false, an error will be received if the file has been processed previously based on an entry in the inbound trade received table (trd_rec).</summary>
    public bool CanBeReprocessed { get; set; }
    
    /// <summary>This will control whether or not an error is thrown if a record type is found while processing a file that is not defined in one of the Record Processor Configuration entries.</summary>
    public bool IgnoreUndefinedRecordTypes { get; set; }
    
    /// <summary>The name of the assembly with the resources used to parse the file.  This will generally be the assembly with the record processors that will be used to process this file.  The resources can be generated by the internal CSS tool, the File Schema Editor.</summary>
    public string ResourcesAssembly { get; set; }
    
    /// <summary>The namespace (in the Resource Assembly described above) that can be used to locate the resources used for parsing the file.</summary>
    public string ResourcesNamespace { get; set; }
    
    /// <summary>XML Namespace used in the block of XML sent to the Record Processors.  This is defined in the configuration so that if the Record Processors for a File and the Operations code are at different versions and use different namespaces, that the code will still be compatible.  The Operations code and Record Processors can be upgraded independently.</summary>
    public string XmlNameSpace { get; set; }
    
    /// <summary>Type containing method that can be called when processing of file starts.  The name of the method called will be BeginningOfFileProcessor and it must have no parameters.  If this entry is not filled in, no call will be made.</summary>
    public string BeginningOfFileProcessorTypeName { get; set; }
    
    /// <summary>A file will contain one or more record types.  Each Record Processor Configuration will describe the details that define the processing for one record type.</summary>
    public RecordProcessorConfigCollection RecordProcessorConfigs { get; set; }
    
    /// <summary>Type containing method that can be called when processing of file is complete.  The method called will be EndOfFileProcessing and it must have no parameters.  If this entry is not filled in, no call will be made.</summary>
    public string EndOfFileProcessorTypeName { get; set; }
}
}
