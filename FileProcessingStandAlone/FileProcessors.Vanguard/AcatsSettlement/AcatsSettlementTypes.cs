/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.AcatsSettlement

{

public partial class AcatsSettlement : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public Settlement Settlement { get; set; }
}


public partial class Settlement : PhysicalRecord
{
public string Recordtype { get; set; } // max length 1; required False
public string RecordLength { get; set; } // max length 4; required False
public string ProductId { get; set; } // max length 13; required False
public string ProductDescription { get; set; } // max length 25; required False
public string RecipientId { get; set; } // max length 4; required False
public string DateCreated { get; set; } // max length 8; required False
public string Reserved { get; set; } // max length 4; required False
public string Reserved1 { get; set; } // max length 1; required False
public BlockingRecord BlockingRecord { get; set; }
}


public partial class AcatsSettlementTransferRecord : BlockingRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
private DateTime? _processingDateFormatted;
public DateTime ProcessingDateFormatted
{
	get
	{
		if (_processingDateFormatted == null)
		{
			_processingDateFormatted = DateTime.Parse(Formatter.Format(ProcessingDate, @"(\d{4})(\d{2})(\d{2})~$1/$2/$3~DateTime"));
		}
		return (DateTime)_processingDateFormatted;
	}
}

public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
private DateTime? _settlementDateFormatted;
public DateTime SettlementDateFormatted
{
	get
	{
		if (_settlementDateFormatted == null)
		{
			_settlementDateFormatted = DateTime.Parse(Formatter.Format(SettlementDate, @"(\d{4})(\d{2})(\d{2})~$1/$2/$3~DateTime"));
		}
		return (DateTime)_settlementDateFormatted;
	}
}

public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string TiRecordType { get; set; } // max length 2; required True
public string Filler5 { get; set; } // max length 9; required True
public string TransferAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string Filler7 { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string OriginaReceiverCustomerAccountNumber { get; set; } // max length 20; required True
public string OriginalReceiverCustomerAccountName { get; set; } // max length 60; required True
public string OriginalReceiverCustomerPrimaryTaxId { get; set; } // max length 9; required True
public string OriginalReceiverCustomerSecondaryTaxId { get; set; } // max length 9; required True
public string OriginalReceiverCustomerAccountType { get; set; } // max length 2; required True
public string GiftDonationIndicator { get; set; } // max length 1; required True
public string OriginalReceiverOccBrokerNumber { get; set; } // max length 5; required True
public string OriginalReceiverCorrespondent { get; set; } // max length 4; required True
public string ContraParticipantType { get; set; } // max length 1; required True
public string OriginalDelivererCustomerAccountNumber { get; set; } // max length 20; required True
public string TranferTypeReject { get; set; } // max length 2; required True
public string AssociatedAcatsControlNumber { get; set; } // max length 14; required True
public string AssociatedSettlementDate { get; set; } // max length 8; required True
public string TransactionReferenceNumber { get; set; } // max length 20; required True
public string Comments { get; set; } // max length 120; required True
public string Filler11 { get; set; } // max length 15; required True
public Collection<OtherAsset> OtherAssets { get; set; }
public Collection<OptionAsset> OptionAssets { get; set; }
public Collection<MutualFundAsset> MutualFundAssets { get; set; }
public Collection<ForeignAsset> ForeignAssets { get; set; }
public Collection<InsuranceAsset> InsuranceAssets { get; set; }
}


public partial class OtherAsset : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string AtRecordType { get; set; } // max length 2; required True
public string ForeignSecurityTradeDate { get; set; } // max length 8; required True
public string AssetAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string TransactionReferenceId { get; set; } // max length 20; required True
public string AtAssetSequenceNumber { get; set; } // max length 6; required True
public string AssetPricingCategory { get; set; } // max length 4; required True
public string OptionCategory { get; set; } // max length 2; required True
public string SettlingLocation { get; set; } // max length 2; required True
public string SettlingLocationReason { get; set; } // max length 4; required True
public string IsinCountryCode { get; set; } // max length 2; required True
public string IsinSecurityIssueId { get; set; } // max length 9; required True
public string IsinSecurityCheckDigit { get; set; } // max length 1; required True
public string DtcSubIssueType { get; set; } // max length 1; required True
public string AssetDescription { get; set; } // max length 140; required True
public string AssetQuantity { get; set; } // max length 17; required True
private Decimal? _assetQuantityFormatted;
public Decimal AssetQuantityFormatted
{
	get
	{
		if (_assetQuantityFormatted == null)
		{
			_assetQuantityFormatted = Decimal.Parse(Formatter.Format(AssetQuantity, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetQuantityFormatted;
	}
}

public string PositionCode { get; set; } // max length 1; required True
public string IsoCurrencyCode { get; set; } // max length 3; required True
public string AssetAmount { get; set; } // max length 17; required True
private Decimal? _assetAmountFormatted;
public Decimal AssetAmountFormatted
{
	get
	{
		if (_assetAmountFormatted == null)
		{
			_assetAmountFormatted = Decimal.Parse(Formatter.Format(AssetAmount, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetAmountFormatted;
	}
}

public string BearerBond { get; set; } // max length 1; required True
public string CashMarginShortCode { get; set; } // max length 1; required True
public string WhenIssuedIndicator { get; set; } // max length 1; required True
public string TransferTypeReason { get; set; } // max length 2; required True
public string MbsSerialNote { get; set; } // max length 3; required True
public string Comment { get; set; } // max length 120; required True
}


public partial class OptionAsset : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string AtRecordType { get; set; } // max length 2; required True
public string ForeignSecurityTradeDate { get; set; } // max length 8; required True
public string AssetAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string TransactionReferenceId { get; set; } // max length 20; required True
public string AtAssetSequenceNumber { get; set; } // max length 6; required True
public string AssetPricingCategory { get; set; } // max length 4; required True
public string OptionCategory { get; set; } // max length 2; required True
public string SettlingLocation { get; set; } // max length 2; required True
public string SettlingLocationReason { get; set; } // max length 4; required True
public string IsinCountryCode { get; set; } // max length 2; required True
public string IsinSecurityIssueId { get; set; } // max length 9; required True
public string IsinSecurityCheckDigit { get; set; } // max length 1; required True
public string DtcSubIssueType { get; set; } // max length 1; required True
public string AssetDescription { get; set; } // max length 140; required True
public string AssetQuantity { get; set; } // max length 17; required True
private Decimal? _assetQuantityFormatted;
public Decimal AssetQuantityFormatted
{
	get
	{
		if (_assetQuantityFormatted == null)
		{
			_assetQuantityFormatted = Decimal.Parse(Formatter.Format(AssetQuantity, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetQuantityFormatted;
	}
}

public string PositionCode { get; set; } // max length 1; required True
public string IsoCurrencyCode { get; set; } // max length 3; required True
public string AssetAmount { get; set; } // max length 17; required True
private Decimal? _assetAmountFormatted;
public Decimal AssetAmountFormatted
{
	get
	{
		if (_assetAmountFormatted == null)
		{
			_assetAmountFormatted = Decimal.Parse(Formatter.Format(AssetAmount, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetAmountFormatted;
	}
}

public string BearerBond { get; set; } // max length 1; required True
public string CashMarginShortCode { get; set; } // max length 1; required True
public string WhenIssuedIndicator { get; set; } // max length 1; required True
public string TransferTypeReason { get; set; } // max length 2; required True
public string MbsSerialNote { get; set; } // max length 3; required True
public string Comment { get; set; } // max length 120; required True
public string OptionBuySellIndicator { get; set; } // max length 1; required False
public string OptionPCIndicator { get; set; } // max length 1; required False
public string OptionOCIndicator { get; set; } // max length 1; required False
public string OptionSymbol { get; set; } // max length 6; required False
public string OptionExpirationDate { get; set; } // max length 8; required False
public string OptionDecimalFractionIndicator { get; set; } // max length 1; required False
public string OptionStrikePriceInteger { get; set; } // max length 5; required False
public string OptionStrikePriceDecimal { get; set; } // max length 3; required False
public string OptionOccDelivererNumber { get; set; } // max length 5; required False
public string OptionAccountType { get; set; } // max length 1; required False
public string SubAccountId { get; set; } // max length 4; required False
public string OptionComments { get; set; } // max length 16; required False
}


public partial class MutualFundAsset : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string AtRecordType { get; set; } // max length 2; required True
public string ForeignSecurityTradeDate { get; set; } // max length 8; required True
public string AssetAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string TransactionReferenceId { get; set; } // max length 20; required True
public string AtAssetSequenceNumber { get; set; } // max length 6; required True
public string AssetPricingCategory { get; set; } // max length 4; required True
public string OptionCategory { get; set; } // max length 2; required True
public string SettlingLocation { get; set; } // max length 2; required True
public string SettlingLocationReason { get; set; } // max length 4; required True
public string IsinCountryCode { get; set; } // max length 2; required True
public string IsinSecurityIssueId { get; set; } // max length 9; required True
public string IsinSecurityCheckDigit { get; set; } // max length 1; required True
public string DtcSubIssueType { get; set; } // max length 1; required True
public string AssetDescription { get; set; } // max length 140; required True
public string AssetQuantity { get; set; } // max length 17; required True
private Decimal? _assetQuantityFormatted;
public Decimal AssetQuantityFormatted
{
	get
	{
		if (_assetQuantityFormatted == null)
		{
			_assetQuantityFormatted = Decimal.Parse(Formatter.Format(AssetQuantity, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetQuantityFormatted;
	}
}

public string PositionCode { get; set; } // max length 1; required True
public string IsoCurrencyCode { get; set; } // max length 3; required True
public string AssetAmount { get; set; } // max length 17; required True
private Decimal? _assetAmountFormatted;
public Decimal AssetAmountFormatted
{
	get
	{
		if (_assetAmountFormatted == null)
		{
			_assetAmountFormatted = Decimal.Parse(Formatter.Format(AssetAmount, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetAmountFormatted;
	}
}

public string BearerBond { get; set; } // max length 1; required True
public string CashMarginShortCode { get; set; } // max length 1; required True
public string WhenIssuedIndicator { get; set; } // max length 1; required True
public string TransferTypeReason { get; set; } // max length 2; required True
public string MbsSerialNote { get; set; } // max length 3; required True
public string Comment { get; set; } // max length 120; required True
public string FundCustomerAccountNumber { get; set; } // max length 20; required True
public string BookPhysicalSharesIndicator { get; set; } // max length 1; required True
public string NetworkControlIndicator { get; set; } // max length 1; required True
public string AccountTypeIndicator { get; set; } // max length 1; required True
public string DividendCode { get; set; } // max length 1; required True
public string DividendPayeeIndicator { get; set; } // max length 1; required True
public string ExecutingBroker { get; set; } // max length 4; required True
public string MfFullPartialIndicator { get; set; } // max length 1; required True
public string ShareAgingIndicator { get; set; } // max length 1; required True
public string FirmMembershipIndicatorDeliverer { get; set; } // max length 2; required True
public string NewFundCustomerAccountNumberReceiver { get; set; } // max length 20; required True
public string ReregistrationDateAtRefund { get; set; } // max length 8; required True
public string MfAgentProcessingIndicatorDeliverer { get; set; } // max length 1; required True
}


public partial class ForeignAsset : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string AtRecordType { get; set; } // max length 2; required True
public string ForeignSecurityTradeDate { get; set; } // max length 8; required True
public string AssetAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string TransactionReferenceId { get; set; } // max length 20; required True
public string AtAssetSequenceNumber { get; set; } // max length 6; required True
public string AssetPricingCategory { get; set; } // max length 4; required True
public string OptionCategory { get; set; } // max length 2; required True
public string SettlingLocation { get; set; } // max length 2; required True
public string SettlingLocationReason { get; set; } // max length 4; required True
public string IsinCountryCode { get; set; } // max length 2; required True
public string IsinSecurityIssueId { get; set; } // max length 9; required True
public string IsinSecurityCheckDigit { get; set; } // max length 1; required True
public string DtcSubIssueType { get; set; } // max length 1; required True
public string AssetDescription { get; set; } // max length 140; required True
public string AssetQuantity { get; set; } // max length 17; required True
private Decimal? _assetQuantityFormatted;
public Decimal AssetQuantityFormatted
{
	get
	{
		if (_assetQuantityFormatted == null)
		{
			_assetQuantityFormatted = Decimal.Parse(Formatter.Format(AssetQuantity, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetQuantityFormatted;
	}
}

public string PositionCode { get; set; } // max length 1; required True
public string IsoCurrencyCode { get; set; } // max length 3; required True
public string AssetAmount { get; set; } // max length 17; required True
private Decimal? _assetAmountFormatted;
public Decimal AssetAmountFormatted
{
	get
	{
		if (_assetAmountFormatted == null)
		{
			_assetAmountFormatted = Decimal.Parse(Formatter.Format(AssetAmount, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetAmountFormatted;
	}
}

public string BearerBond { get; set; } // max length 1; required True
public string CashMarginShortCode { get; set; } // max length 1; required True
public string WhenIssuedIndicator { get; set; } // max length 1; required True
public string TransferTypeReason { get; set; } // max length 2; required True
public string MbsSerialNote { get; set; } // max length 3; required True
public string Comment { get; set; } // max length 120; required True
public string SedolNumber { get; set; } // max length 7; required True
public string CinsNumber { get; set; } // max length 9; required True
public string DeliveringFirmSettlementInstructionLine1 { get; set; } // max length 35; required True
public string DeliveringFirmSettlementInstructionLine2 { get; set; } // max length 35; required True
public string DeliveringFirmSettlementInstructionLine3 { get; set; } // max length 35; required True
public string DeliveringFirmSettlementInstructionLine4 { get; set; } // max length 35; required True
public string DeliveringFirmSettlementInstructionLine5 { get; set; } // max length 35; required True
}


public partial class InsuranceAsset : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required True
public string RecordSubtype { get; set; } // max length 1; required True
public string RecordLength { get; set; } // max length 4; required True
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string DistributionSide { get; set; } // max length 1; required True
public string AcatsControlNumber { get; set; } // max length 14; required True
public string AssetSequenceNumber { get; set; } // max length 6; required True
public string ProcessingDate { get; set; } // max length 8; required True
public string DistributionParticipant { get; set; } // max length 4; required True
public string Status { get; set; } // max length 3; required True
public string DaysInStatus { get; set; } // max length 3; required True
public string SettlementDate { get; set; } // max length 8; required True
public string SettlementTiming { get; set; } // max length 1; required True
public string ValueFreeIndicator { get; set; } // max length 1; required True
public string DebitCreditIndicator { get; set; } // max length 1; required True
public string AtRecordType { get; set; } // max length 2; required True
public string ForeignSecurityTradeDate { get; set; } // max length 8; required True
public string AssetAcatsControlNumber { get; set; } // max length 14; required True
public string TransferType { get; set; } // max length 3; required True
public string OriginalReceiverNumber { get; set; } // max length 4; required True
public string OriginalDelivererNumber { get; set; } // max length 4; required True
public string TransactionReferenceId { get; set; } // max length 20; required True
public string AtAssetSequenceNumber { get; set; } // max length 6; required True
public string AssetPricingCategory { get; set; } // max length 4; required True
public string OptionCategory { get; set; } // max length 2; required True
public string SettlingLocation { get; set; } // max length 2; required True
public string SettlingLocationReason { get; set; } // max length 4; required True
public string IsinCountryCode { get; set; } // max length 2; required True
public string IsinSecurityIssueId { get; set; } // max length 9; required True
public string IsinSecurityCheckDigit { get; set; } // max length 1; required True
public string DtcSubIssueType { get; set; } // max length 1; required True
public string AssetDescription { get; set; } // max length 140; required True
public string AssetQuantity { get; set; } // max length 17; required True
private Decimal? _assetQuantityFormatted;
public Decimal AssetQuantityFormatted
{
	get
	{
		if (_assetQuantityFormatted == null)
		{
			_assetQuantityFormatted = Decimal.Parse(Formatter.Format(AssetQuantity, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetQuantityFormatted;
	}
}

public string PositionCode { get; set; } // max length 1; required True
public string IsoCurrencyCode { get; set; } // max length 3; required True
public string AssetAmount { get; set; } // max length 17; required True
private Decimal? _assetAmountFormatted;
public Decimal AssetAmountFormatted
{
	get
	{
		if (_assetAmountFormatted == null)
		{
			_assetAmountFormatted = Decimal.Parse(Formatter.Format(AssetAmount, @"(\d+)(?:,)?(?<Dec>\d+)?~$1.${Dec}0~Decimal"));
		}
		return (Decimal)_assetAmountFormatted;
	}
}

public string BearerBond { get; set; } // max length 1; required True
public string CashMarginShortCode { get; set; } // max length 1; required True
public string WhenIssuedIndicator { get; set; } // max length 1; required True
public string TransferTypeReason { get; set; } // max length 2; required True
public string MbsSerialNote { get; set; } // max length 3; required True
public string Comment { get; set; } // max length 120; required True
public string InsuranceCustomerAccountNumberDeliverer { get; set; } // max length 20; required False
public string Owner1NaturalNonNaturalIndicator { get; set; } // max length 1; required False
public string Owner1Name { get; set; } // max length 105; required False
public string Owner1Id { get; set; } // max length 20; required False
public string Owner1IdQualifier { get; set; } // max length 2; required False
public string Owner1Qualifier { get; set; } // max length 1; required False
public string Owner2NaturalNonNaturalIndicator { get; set; } // max length 1; required False
public string Owner2Name { get; set; } // max length 105; required False
public string Owner2Id { get; set; } // max length 20; required False
public string Owner2IdQualifier { get; set; } // max length 2; required False
public string Owner2Qualifier { get; set; } // max length 1; required False
public string Annuitant1Name { get; set; } // max length 105; required False
public string Annuitant1Id { get; set; } // max length 20; required False
public string Annuitant1IdQualifier { get; set; } // max length 2; required False
public string Annuitant2Name { get; set; } // max length 105; required False
public string Annuitant2Id { get; set; } // max length 20; required False
public string Annuitant2IdQualifier { get; set; } // max length 2; required False
public string IrsQualificationCode { get; set; } // max length 4; required False
public string ContractNumber { get; set; } // max length 30; required False
public string ContractValue { get; set; } // max length 16; required False
public string ContractValueAsOfDate { get; set; } // max length 8; required False
public string DeliveringAssociatedFirmId { get; set; } // max length 4; required False
}


[System.Xml.Serialization.XmlInclude(typeof(AcatsSettlementTransferRecord))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
				// from e-mail received from Vanguard on 2019-08-28, ignore sign on number and only use field (dr/cr) to determine sign
				outputString = /*"-" +*/ outputString + index.ToString();
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
