/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.CnsProjectionMidday

{

public partial class CnsProjectionMidday : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
private DateTime? _applicationDateFormatted;
public DateTime ApplicationDateFormatted
{
	get
	{
		if (_applicationDateFormatted == null)
		{
			_applicationDateFormatted = DateTime.Parse(Formatter.Format(ApplicationDate, @"(\d{4})(\d{2})(\d{2})~$1/$2/$3T00:00~DateTime"));
		}
		return (DateTime)_applicationDateFormatted;
	}
}

public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public CnsProjection CnsProjection { get; set; }
}


public partial class CnsProjection : PhysicalRecord
{
public string RecordType { get; set; } // max length 1; required False
public string Title { get; set; } // max length 39; required False
public string ProcessingDate { get; set; } // max length 10; required False
private DateTime? _processingDateFormatted;
public DateTime ProcessingDateFormatted
{
	get
	{
		if (_processingDateFormatted == null)
		{
			_processingDateFormatted = DateTime.Parse(Formatter.Format(ProcessingDate, @"(\d{2})-(\d{2})-(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_processingDateFormatted;
	}
}

public string Title2 { get; set; } // max length 19; required False
public string SettlementDate { get; set; } // max length 10; required False
private DateTime? _settlementDateFormatted;
public DateTime SettlementDateFormatted
{
	get
	{
		if (_settlementDateFormatted == null)
		{
			_settlementDateFormatted = DateTime.Parse(Formatter.Format(SettlementDate, @"(\d{2})-(\d{2})-(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_settlementDateFormatted;
	}
}

public string FutureUse { get; set; } // max length 116; required False
public string ParticipantClearningNumber { get; set; } // max length 4; required False
public string ParticipantSubAccount { get; set; } // max length 1; required False
public BlockingRecord BlockingRecord { get; set; }
}


public partial class Detail : BlockingRecord
{
public string RecordType { get; set; } // max length 1; required False
public string Cusip { get; set; } // max length 9; required False
public string Isin { get; set; } // max length 12; required False
public string TodaysNetPositionBeforeDayCycle { get; set; } // max length 12; required False
private Decimal? _todaysNetPositionBeforeDayCycleFormatted;
public Decimal TodaysNetPositionBeforeDayCycleFormatted
{
	get
	{
		if (_todaysNetPositionBeforeDayCycleFormatted == null)
		{
			_todaysNetPositionBeforeDayCycleFormatted = Decimal.Parse(Formatter.Format(TodaysNetPositionBeforeDayCycle, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_todaysNetPositionBeforeDayCycleFormatted;
	}
}

public string TodaysNetSameDaySettlingTrades { get; set; } // max length 12; required False
private Decimal? _todaysNetSameDaySettlingTradesFormatted;
public Decimal TodaysNetSameDaySettlingTradesFormatted
{
	get
	{
		if (_todaysNetSameDaySettlingTradesFormatted == null)
		{
			_todaysNetSameDaySettlingTradesFormatted = Decimal.Parse(Formatter.Format(TodaysNetSameDaySettlingTrades, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_todaysNetSameDaySettlingTradesFormatted;
	}
}

public string TodaysNetSameDayStockDividendOther { get; set; } // max length 12; required False
private Decimal? _todaysNetSameDayStockDividendOtherFormatted;
public Decimal TodaysNetSameDayStockDividendOtherFormatted
{
	get
	{
		if (_todaysNetSameDayStockDividendOtherFormatted == null)
		{
			_todaysNetSameDayStockDividendOtherFormatted = Decimal.Parse(Formatter.Format(TodaysNetSameDayStockDividendOther, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_todaysNetSameDayStockDividendOtherFormatted;
	}
}

public string TodaysNetAllocationsDayCycle { get; set; } // max length 12; required False
private Decimal? _todaysNetAllocationsDayCycleFormatted;
public Decimal TodaysNetAllocationsDayCycleFormatted
{
	get
	{
		if (_todaysNetAllocationsDayCycleFormatted == null)
		{
			_todaysNetAllocationsDayCycleFormatted = Decimal.Parse(Formatter.Format(TodaysNetAllocationsDayCycle, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_todaysNetAllocationsDayCycleFormatted;
	}
}

public string TodaysNetPositionCurrent { get; set; } // max length 12; required False
private Decimal? _todaysNetPositionCurrentFormatted;
public Decimal TodaysNetPositionCurrentFormatted
{
	get
	{
		if (_todaysNetPositionCurrentFormatted == null)
		{
			_todaysNetPositionCurrentFormatted = Decimal.Parse(Formatter.Format(TodaysNetPositionCurrent, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_todaysNetPositionCurrentFormatted;
	}
}

public string TomorrowsNetSettlingTrades { get; set; } // max length 12; required False
private Decimal? _tomorrowsNetSettlingTradesFormatted;
public Decimal TomorrowsNetSettlingTradesFormatted
{
	get
	{
		if (_tomorrowsNetSettlingTradesFormatted == null)
		{
			_tomorrowsNetSettlingTradesFormatted = Decimal.Parse(Formatter.Format(TomorrowsNetSettlingTrades, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_tomorrowsNetSettlingTradesFormatted;
	}
}

public string TomorrowsNetStockDividendsOther { get; set; } // max length 12; required False
private Decimal? _tomorrowsNetStockDividendsOtherFormatted;
public Decimal TomorrowsNetStockDividendsOtherFormatted
{
	get
	{
		if (_tomorrowsNetStockDividendsOtherFormatted == null)
		{
			_tomorrowsNetStockDividendsOtherFormatted = Decimal.Parse(Formatter.Format(TomorrowsNetStockDividendsOther, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_tomorrowsNetStockDividendsOtherFormatted;
	}
}

public string OneDaySettlingTrades { get; set; } // max length 12; required False
private Decimal? _oneDaySettlingTradesFormatted;
public Decimal OneDaySettlingTradesFormatted
{
	get
	{
		if (_oneDaySettlingTradesFormatted == null)
		{
			_oneDaySettlingTradesFormatted = Decimal.Parse(Formatter.Format(OneDaySettlingTrades, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_oneDaySettlingTradesFormatted;
	}
}

public string OneDaySettlingStockDividendOther { get; set; } // max length 12; required False
private Decimal? _oneDaySettlingStockDividendOtherFormatted;
public Decimal OneDaySettlingStockDividendOtherFormatted
{
	get
	{
		if (_oneDaySettlingStockDividendOtherFormatted == null)
		{
			_oneDaySettlingStockDividendOtherFormatted = Decimal.Parse(Formatter.Format(OneDaySettlingStockDividendOther, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_oneDaySettlingStockDividendOtherFormatted;
	}
}

public string TomorrowsProjectedNetPosition { get; set; } // max length 12; required False
private Decimal? _tomorrowsProjectedNetPositionFormatted;
public Decimal TomorrowsProjectedNetPositionFormatted
{
	get
	{
		if (_tomorrowsProjectedNetPositionFormatted == null)
		{
			_tomorrowsProjectedNetPositionFormatted = Decimal.Parse(Formatter.Format(TomorrowsProjectedNetPosition, @"(\d{11})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_tomorrowsProjectedNetPositionFormatted;
	}
}

public string TomorrowsProjectedMarketValue { get; set; } // max length 16; required False
private Decimal? _tomorrowsProjectedMarketValueFormatted;
public Decimal TomorrowsProjectedMarketValueFormatted
{
	get
	{
		if (_tomorrowsProjectedMarketValueFormatted == null)
		{
			_tomorrowsProjectedMarketValueFormatted = Decimal.Parse(Formatter.Format(TomorrowsProjectedMarketValue, @"(\d{15})([-+])~$2$1~Decimal"));
		}
		return (Decimal)_tomorrowsProjectedMarketValueFormatted;
	}
}

public string ParticipantClearingNumber { get; set; } // max length 4; required False
public string ParticipantSubAccount { get; set; } // max length 1; required False
}


public partial class Trailer : BlockingRecord
{
public string RecordType { get; set; } // max length 1; required False
public string TomorrowsSettlingTrades { get; set; } // max length 11; required False
public string TomorrowsSettlingTradesSign { get; set; } // max length 1; required False
public string TomorrowsTotalStockDividends { get; set; } // max length 11; required False
public string TomorrowsStockDividendsSign { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 5; required False
public string ParticipantClearingNumber { get; set; } // max length 4; required False
public string ParticipantSubAccount { get; set; } // max length 1; required False
}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
[System.Xml.Serialization.XmlInclude(typeof(Trailer))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
				// from e-mail received from Vanguard on 2019-08-28, ignore sign on number and only use field (dr/cr) to determine sign
				outputString = /*"-" +*/ outputString + index.ToString();
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
