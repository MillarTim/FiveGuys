/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.DollarTotals

{

public class DollarTotals : PhysicalRecord
{
public string RecordId { get; set; } // max length 2; required False
public string FileIdentifier { get; set; } // max length 10; required False
public string FileNumber { get; set; } // max length 2; required False
public string DateTimeStamp { get; set; } // max length 26; required False
private DateTime? _dateTimeStampFormatted;
public DateTime DateTimeStampFormatted
{
	get
	{
		if (_dateTimeStampFormatted == null)
		{
			_dateTimeStampFormatted = DateTime.Parse(Formatter.Format(DateTimeStamp, @"(\d{4})-(\d{2})-(\d{2})-(\d{2})\.(\d{2})\.(\d{2})\.(\d{6})~$1/$2/$3T$4:$5:$6.$7~DateTime"));
		}
		return (DateTime)_dateTimeStampFormatted;
	}
}

public BlockingRecord BlockingRecord { get; set; }
}


public class Detail : BlockingRecord
{
public string RecordId { get; set; } // max length 2; required False
public string FileIdentifier { get; set; } // max length 10; required False
public string FileNumber { get; set; } // max length 2; required False
public string DebitAggregateDollarTotal { get; set; } // max length 18; required False
private decimal? _debitAggregateDollarTotalFormatted;
public decimal DebitAggregateDollarTotalFormatted
{
	get
	{
		if (_debitAggregateDollarTotalFormatted == null)
		{
			_debitAggregateDollarTotalFormatted = decimal.Parse(Formatter.Format(DebitAggregateDollarTotal, @"(\d{16})(\d[A-R\{\}])~$1.$2~EBCDIC_BCD"));
		}
		return (decimal)_debitAggregateDollarTotalFormatted;
	}
}

public string CreditAggregateDollarTotal { get; set; } // max length 18; required False
private decimal? _creditAggregateDollarTotalFormatted;
public decimal CreditAggregateDollarTotalFormatted
{
	get
	{
		if (_creditAggregateDollarTotalFormatted == null)
		{
			_creditAggregateDollarTotalFormatted = decimal.Parse(Formatter.Format(CreditAggregateDollarTotal, @"(\d{16})(\d[A-R\{\}])~$1.$2~EBCDIC_BCD"));
		}
		return (decimal)_creditAggregateDollarTotalFormatted;
	}
}

}


public class Trailer : BlockingRecord
{
public string RecordId { get; set; } // max length 2; required False
public string FileIdentifier { get; set; } // max length 10; required False
public string FileNumber { get; set; } // max length 2; required False
public string NumberOfRecordsInFile { get; set; } // max length 9; required False
private int? _numberOfRecordsInFileFormatted;
public int NumberOfRecordsInFileFormatted
{
	get
	{
		if (_numberOfRecordsInFileFormatted == null)
		{
			_numberOfRecordsInFileFormatted = int.Parse(Formatter.Format(NumberOfRecordsInFile, @"(\d{9})~$1~int"));
		}
		return (int)_numberOfRecordsInFileFormatted;
	}
}

public string DebitTotal { get; set; } // max length 18; required False
private decimal? _debitTotalFormatted;
public decimal DebitTotalFormatted
{
	get
	{
		if (_debitTotalFormatted == null)
		{
			_debitTotalFormatted = decimal.Parse(Formatter.Format(DebitTotal, @"(\d{16})(\d[A-R\{\}])~$1.$2~EBCDIC_BCD"));
		}
		return (decimal)_debitTotalFormatted;
	}
}

public string DebitCount { get; set; } // max length 9; required False
private int? _debitCountFormatted;
public int DebitCountFormatted
{
	get
	{
		if (_debitCountFormatted == null)
		{
			_debitCountFormatted = int.Parse(Formatter.Format(DebitCount, @"(\d{9})~$1~int"));
		}
		return (int)_debitCountFormatted;
	}
}

public string CreditTotal { get; set; } // max length 18; required False
private decimal? _creditTotalFormatted;
public decimal CreditTotalFormatted
{
	get
	{
		if (_creditTotalFormatted == null)
		{
			_creditTotalFormatted = decimal.Parse(Formatter.Format(CreditTotal, @"(\d{16})(\d[A-R\{\}])~$1.$2~EBCDIC_BCD"));
		}
		return (decimal)_creditTotalFormatted;
	}
}

public string CreditCount { get; set; } // max length 9; required False
private int? _creditCountFormatted;
public int CreditCountFormatted
{
	get
	{
		if (_creditCountFormatted == null)
		{
			_creditCountFormatted = int.Parse(Formatter.Format(CreditCount, @"(\d{9})~$1~int"));
		}
		return (int)_creditCountFormatted;
	}
}

public string TotalNetDollarAmountForFile { get; set; } // max length 18; required False
private decimal? _totalNetDollarAmountForFileFormatted;
public decimal TotalNetDollarAmountForFileFormatted
{
	get
	{
		if (_totalNetDollarAmountForFileFormatted == null)
		{
			_totalNetDollarAmountForFileFormatted = decimal.Parse(Formatter.Format(TotalNetDollarAmountForFile, @"(\d{16})(\d[A-R\{\}])~$1.$2~EBCDIC_BCD"));
		}
		return (decimal)_totalNetDollarAmountForFileFormatted;
	}
}

}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
[System.Xml.Serialization.XmlInclude(typeof(Trailer))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
				// from e-mail received from Vanguard on 2019-08-28, ignore sign on number and only use field (dr/cr) to determine sign
				outputString = /*"-" +*/ outputString + index.ToString();
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
