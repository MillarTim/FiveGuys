/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.MutualFundSettlements

{

public class MutualFundSettlement : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationSMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public Settlement Settlement { get; set; }
}


public class Settlement : PhysicalRecord
{
public string PhysicalSequenceNumber { get; set; } // max length 2; required True
public string LogicalSequenceNumber { get; set; } // max length 2; required True
public string OriginatorType { get; set; } // max length 1; required True
public string RecipientNumber { get; set; } // max length 4; required True
public string RecordType { get; set; } // max length 3; required True
public string TransmissionDate { get; set; } // max length 8; required True
private DateTime? _transmissionDateFormatted;
public DateTime TransmissionDateFormatted
{
	get
	{
		if (_transmissionDateFormatted == null)
		{
			_transmissionDateFormatted = DateTime.Parse(Formatter.Format(TransmissionDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_transmissionDateFormatted;
	}
}

public string Literal { get; set; } // max length 4; required True
public string AutoRouteFileNumber { get; set; } // max length 8; required True
public string AutoRouteFileCycle { get; set; } // max length 2; required True
public string FileDescription { get; set; } // max length 18; required True
public BlockingRecord BlockingRecord { get; set; }
}


public class Detail : BlockingRecord
{
public string PhysicalSequenceNumber1 { get; set; } // max length 2; required False
public string LogicalSequenceNumber1 { get; set; } // max length 2; required False
public string OriginatorType { get; set; } // max length 1; required False
public string ReceipientNumber { get; set; } // max length 4; required False
public string RecordType { get; set; } // max length 3; required False
public string TestIndicator { get; set; } // max length 1; required False
public string ContraParticipantNumber { get; set; } // max length 4; required False
public string SecurityIssueCountryCode { get; set; } // max length 2; required False
public string SecurityIssueId { get; set; } // max length 9; required False
public string SecurityIssueCheckDigit { get; set; } // max length 1; required False
public string SecurityIssueType { get; set; } // max length 2; required False
public string ControlNumber { get; set; } // max length 15; required False
public string CorrectionExchangeIndicator { get; set; } // max length 1; required False
public string TradeType { get; set; } // max length 3; required False
public string SettlementDate { get; set; } // max length 8; required False
private DateTime? _settlementDateFormatted;
public DateTime SettlementDateFormatted
{
	get
	{
		if (_settlementDateFormatted == null)
		{
			_settlementDateFormatted = DateTime.Parse(Formatter.Format(SettlementDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_settlementDateFormatted;
	}
}

public string TradeDate { get; set; } // max length 8; required False
private DateTime? _tradeDateFormatted;
public DateTime TradeDateFormatted
{
	get
	{
		if (_tradeDateFormatted == null)
		{
			_tradeDateFormatted = DateTime.Parse(Formatter.Format(TradeDate, @"(\d{2})(\d{2})(\d{4})~$3/$1/$2~DateTime"));
		}
		return (DateTime)_tradeDateFormatted;
	}
}

public string AgentForFirmNumber { get; set; } // max length 4; required False
public string BuySellCode { get; set; } // max length 1; required False
public string RecipientType { get; set; } // max length 1; required False
public string FirmOrTpaInvestmentAgenTppNumber { get; set; } // max length 4; required False
public string ServiceProviderOrFirmNumber { get; set; } // max length 4; required False
public string PhysicalSequenceNumber2 { get; set; } // max length 2; required False
public string LogicalSequenceNumber2 { get; set; } // max length 2; required False
public string ShareQuantity { get; set; } // max length 14; required False
private Decimal? _shareQuantityFormatted;
public Decimal ShareQuantityFormatted
{
	get
	{
		if (_shareQuantityFormatted == null)
		{
			_shareQuantityFormatted = Decimal.Parse(Formatter.Format(ShareQuantity, @"(\d{10})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_shareQuantityFormatted;
	}
}

public string PricePerShare { get; set; } // max length 12; required False
private Decimal? _pricePerShareFormatted;
public Decimal PricePerShareFormatted
{
	get
	{
		if (_pricePerShareFormatted == null)
		{
			_pricePerShareFormatted = Decimal.Parse(Formatter.Format(PricePerShare, @"(\d{6})(\d{6})~$1.$2~Decimal"));
		}
		return (Decimal)_pricePerShareFormatted;
	}
}

public string SettlementMoneyAmount { get; set; } // max length 16; required False
private Decimal? _settlementMoneyAmountFormatted;
public Decimal SettlementMoneyAmountFormatted
{
	get
	{
		if (_settlementMoneyAmountFormatted == null)
		{
			_settlementMoneyAmountFormatted = Decimal.Parse(Formatter.Format(SettlementMoneyAmount, @"(\d{14})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_settlementMoneyAmountFormatted;
	}
}

public string CurrencyIndicator { get; set; } // max length 3; required False
public string SettlementIndicator { get; set; } // max length 1; required False
public string ContraExchangeSecurityIssueCountryCode { get; set; } // max length 2; required False
public string ContraExchangeSecurityIssueId { get; set; } // max length 9; required False
public string ContraExchangeSecurityIssueCheckDigit { get; set; } // max length 1; required False
}


public class Trailer : BlockingRecord
{
public string PhysicalSequenceNumber1 { get; set; } // max length 2; required False
public string LogicalSequenceNumber1 { get; set; } // max length 2; required False
public string OriginatorType { get; set; } // max length 1; required False
public string RecipientNumber { get; set; } // max length 4; required False
public string RecordType { get; set; } // max length 3; required False
public string Literal { get; set; } // max length 15; required False
public string Literal2 { get; set; } // max length 12; required False
public string SettlementDate { get; set; } // max length 8; required False
public string DebitItems { get; set; } // max length 6; required False
private int? _debitItemsFormatted;
public int DebitItemsFormatted
{
	get
	{
		if (_debitItemsFormatted == null)
		{
			_debitItemsFormatted = int.Parse(Formatter.Format(DebitItems, @"(\d{6})~$1~int"));
		}
		return (int)_debitItemsFormatted;
	}
}

public string DebitShareQuantity { get; set; } // max length 15; required False
private Decimal? _debitShareQuantityFormatted;
public Decimal DebitShareQuantityFormatted
{
	get
	{
		if (_debitShareQuantityFormatted == null)
		{
			_debitShareQuantityFormatted = Decimal.Parse(Formatter.Format(DebitShareQuantity, @"(\d{11})(\d{4})~$1.$2~Decimal"));
		}
		return (Decimal)_debitShareQuantityFormatted;
	}
}

public string PhysicalSequenceNumber2 { get; set; } // max length 2; required False
public string LogicalSequenceNumber2 { get; set; } // max length 2; required False
public string DebitMoneyAmount { get; set; } // max length 17; required False
private Decimal? _debitMoneyAmountFormatted;
public Decimal DebitMoneyAmountFormatted
{
	get
	{
		if (_debitMoneyAmountFormatted == null)
		{
			_debitMoneyAmountFormatted = Decimal.Parse(Formatter.Format(DebitMoneyAmount, @"(\d{15})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_debitMoneyAmountFormatted;
	}
}

public string CurrencyIndicatorDebit { get; set; } // max length 3; required False
public string CreditItems { get; set; } // max length 6; required False
public string CreditShareQuantity { get; set; } // max length 15; required False
private Decimal? _creditShareQuantityFormatted;
public Decimal CreditShareQuantityFormatted
{
	get
	{
		if (_creditShareQuantityFormatted == null)
		{
			_creditShareQuantityFormatted = Decimal.Parse(Formatter.Format(CreditShareQuantity, @"(\d{11})(\d{4})~$1.$2~Decimal"));
		}
		return (Decimal)_creditShareQuantityFormatted;
	}
}

public string CreditMoneyAmount { get; set; } // max length 17; required False
private Decimal? _creditMoneyAmountFormatted;
public Decimal CreditMoneyAmountFormatted
{
	get
	{
		if (_creditMoneyAmountFormatted == null)
		{
			_creditMoneyAmountFormatted = Decimal.Parse(Formatter.Format(CreditMoneyAmount, @"(\d{15})(\d{2})~$1.$2~Decimal"));
		}
		return (Decimal)_creditMoneyAmountFormatted;
	}
}

public string CurrencyIndicatorCredit { get; set; } // max length 3; required False
}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
[System.Xml.Serialization.XmlInclude(typeof(Trailer))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
				// from e-mail received from Vanguard on 2019-08-28, ignore sign on number and only use field (dr/cr) to determine sign
				outputString = /*"-" +*/ outputString + index.ToString();
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
