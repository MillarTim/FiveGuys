/*====================================================================
NOTE:
This code was auto generated by the FixedLengthFile CSharpCode Generator
This file was created in the directory: 
     C:\TFS\Bronze\Enterprise\CSS\Sdk\Utilities\FixedLengthFile\FlatFileDefinitionFiles\Vanguard
====================================================================*/

using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;

namespace CSS.Connector.FileProcessors.Vanguard.SettlementBalances

{

public partial class SettlementBalance : PhysicalRecord
{
public string HeaderId { get; set; } // max length 6; required False
public string ApplicationDate { get; set; } // max length 8; required False
public string ProductNumber { get; set; } // max length 3; required False
public string ProductDescription { get; set; } // max length 20; required False
public string MultiCycleTransmissionCounter { get; set; } // max length 2; required False
public string PossDupeIndicator { get; set; } // max length 1; required False
public string ProductId { get; set; } // max length 8; required False
public string ApplicationMultiCycleCounter { get; set; } // max length 2; required False
public string RecipientId { get; set; } // max length 7; required False
public string Constant1 { get; set; } // max length 1; required False
public string RecordCount { get; set; } // max length 9; required False
public string SenderId { get; set; } // max length 4; required False
public string Constant { get; set; } // max length 3; required False
public string DateTimeCreated { get; set; } // max length 16; required False
private DateTime? _dateTimeCreatedFormatted;
public DateTime DateTimeCreatedFormatted
{
	get
	{
		if (_dateTimeCreatedFormatted == null)
		{
			_dateTimeCreatedFormatted = DateTime.Parse(Formatter.Format(DateTimeCreated, @"(\d{4})(\d{2})(\d{2}).{3}(.{5})~$1/$2/$3T$4:00~DateTime"));
		}
		return (DateTime)_dateTimeCreatedFormatted;
	}
}

public BlockingRecord BlockingRecord { get; set; }
}


public partial class Detail : BlockingRecord
{
public string MroTimestamp { get; set; } // max length 26; required False
private DateTime? _mroTimestampFormatted;
public DateTime MroTimestampFormatted
{
	get
	{
		if (_mroTimestampFormatted == null)
		{
			_mroTimestampFormatted = DateTime.Parse(Formatter.Format(MroTimestamp, @"(\d{4})-(\d{2})-(\d{2})-(\d{2})\.(\d{2})\.(\d{2})\.(\d{6})~$1/$2/$3T$4:$5:$6.$7~DateTime"));
		}
		return (DateTime)_mroTimestampFormatted;
	}
}

public string MroBalanceTypeOrderNum { get; set; } // max length 3; required False
public string MroBalanceType { get; set; } // max length 30; required False
public string MroLegalEntity { get; set; } // max length 4; required False
public string MroCollateralGroup { get; set; } // max length 4; required False
public string MroParticipantId { get; set; } // max length 4; required False
public string MroActivityCode { get; set; } // max length 5; required False
public string MroSubActivityCode { get; set; } // max length 3; required False
public string MroActivityCodeDescr { get; set; } // max length 30; required False
public string MroRecordType { get; set; } // max length 1; required False
public string MroCreditAmount { get; set; } // max length 18; required False
private Decimal? _mroCreditAmountFormatted;
public Decimal MroCreditAmountFormatted
{
	get
	{
		if (_mroCreditAmountFormatted == null)
		{
			_mroCreditAmountFormatted = Decimal.Parse(Formatter.Format(MroCreditAmount, @"\d{15}\.\d{2}~$0~Decimal"));
		}
		return (Decimal)_mroCreditAmountFormatted;
	}
}

public string MroDebitAmount { get; set; } // max length 18; required False
private Decimal? _mroDebitAmountFormatted;
public Decimal MroDebitAmountFormatted
{
	get
	{
		if (_mroDebitAmountFormatted == null)
		{
			_mroDebitAmountFormatted = Decimal.Parse(Formatter.Format(MroDebitAmount, @"\d{15}\.\d{2}~$0~Decimal"));
		}
		return (Decimal)_mroDebitAmountFormatted;
	}
}

public string MroNetDbCrInd { get; set; } // max length 1; required False
public string MroNetBalance { get; set; } // max length 18; required False
private Decimal? _mroNetBalanceFormatted;
public Decimal MroNetBalanceFormatted
{
	get
	{
		if (_mroNetBalanceFormatted == null)
		{
			_mroNetBalanceFormatted = Decimal.Parse(Formatter.Format(MroNetBalance, @"\d{15}\.\d{2}~$0~Decimal"));
		}
		return (Decimal)_mroNetBalanceFormatted;
	}
}

}


[System.Xml.Serialization.XmlInclude(typeof(Detail))]
public class BlockingRecord : PhysicalRecord
{
}

public class PhysicalRecord : object
{
[System.Xml.Serialization.XmlAttribute]
public int PhysicalFileRecordNumber { get; set; }
}

internal static class Formatter
{
	readonly static string codeCharsPositive = "{ABCDEFGHI";
	readonly static string codeCharsNegative = "}JKLMNOPQR";

	internal static string Format(string stringToFormat, string formattingString)
	{
		string outputString = stringToFormat;
		string[] formattingStrings = formattingString.Split('~');
		// formattingStrings should have 3 or 4 components. 3 for dates & 4 for decimalls
		int formattingStringCount = formattingStrings.Count();
		if (formattingStringCount != 3 && formattingStringCount != 4) throw new DataException(string.Format("Formatting string ({0}) is invalid.  It must be tilde delimited with three or four components.  See code for more details.", formattingString));

		if (!Regex.IsMatch(outputString, formattingStrings[0]))
			throw new DataException(string.Format("String to format ({0}) does not match expected format ({1}).", stringToFormat, formattingString));

		outputString = Regex.Replace(outputString, formattingStrings[0], formattingStrings[1]);

		// IBM binary coded decimal where last digit defines least significant digit and sign of the entire number
		if (formattingStrings[2] == "EBCDIC_BCD")
		{
			string rightMostDigit = outputString[outputString.Length - 1].ToString();
			outputString = outputString.Substring(0, outputString.Length - 1);
			int index = codeCharsNegative.IndexOf(rightMostDigit);
			if (index > -1)
				// from e-mail received from Vanguard on 2019-08-28, ignore sign on number and only use field (dr/cr) to determine sign
				outputString = /*"-" +*/ outputString + index.ToString();
			else
				outputString += codeCharsPositive.IndexOf(rightMostDigit).ToString();
			formattingStrings[2] = "Decimal"; // Once data has been fixed, it's a normal decimal
		}

		if (formattingStringCount == 4)
		{
			TypeCode typeCode = (TypeCode)Enum.Parse(typeof(TypeCode), formattingStrings[2], true);
			outputString = string.Format(formattingStrings[3], Convert.ChangeType(outputString, typeCode));
		}
		return outputString;
	}
}
}
